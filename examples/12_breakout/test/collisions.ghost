class Collisions {
  function constructor(platform, ball) {
    this.platform = platform
    this.ball = ball
    this.bricks = []
    this.walls = []
  }

  function setBricks(bricks) {
    this.bricks = bricks
  }

  function setWalls(walls) {
    this.walls = walls
  }

  function update() {
    this.checkBallPlatformCollision()
    this.checkBallBricksCollision()
    this.checkBallWallsCollision()
    this.checkPlatformWallsCollision()
  }

  function aabb(a, b) {
    overlaps = false
    shiftX = 0
    shiftY = 0

    if (! (a.x + a.width < b.x or a.x > b.x + b.width or a.y + a.height < b.y or a.y > b.y + b.height)) {
      overlaps = true
    }

    if (overlaps) {
      if ((a.x + a.width / 2) < (b.x + b.width / 2)) {
        shiftX = (a.x + a.width) - b.x
      } else {
        shiftX = a.x - (b.x - b.width)
      }

      if ((a.y + a.height / 2) < (b.y + b.height / 2)) {
        shiftY = (a.y + a.height) - b.y
      } else {
        shiftY = a.y - (b.y - b.height)
      }
    }

    return {
      'overlaps': overlaps,
      'shiftX': shiftX,
      'shiftY': shiftY
    }
  }

  function checkBallPlatformCollision() {
    a = {
      'x': this.platform.position.x,
      'y': this.platform.position.y,
      'width': this.platform.width,
      'height': this.platform.height
    }

    b = {
      'x': this.ball.position.x - this.ball.radius,
      'y': this.ball.position.y - this.ball.radius,
      'width': this.ball.radius * 2,
      'height': this.ball.radius * 2
    }

    check = this.aabb(a, b)

    if (check.overlaps) {
      this.ball.bounce(check.shiftX, check.shiftY)
      // print('ball-platform collision')
    }
  }

  function checkBallBricksCollision() {
    b = {
      'x': this.ball.position.x - this.ball.radius,
      'y': this.ball.position.y - this.ball.radius,
      'width': this.ball.radius * 2,
      'height': this.ball.radius * 2
    }

    for (i = 0; i < this.bricks.length(); i = i + 1) {
      brick = this.bricks[i]

      if (brick) {
        a = {
          'x': brick.position.x,
          'y': brick.position.y,
          'width': brick.width,
          'height': brick.height
        }

        check = this.aabb(a, b)

        if (check.overlaps) {
          this.ball.bounce(check.shiftX, check.shiftY)
          this.bricks[i] = null
          // print('ball-brick collision')
        }
      }
    }
  }

  function checkBallWallsCollision() {
    b = {
      'x': this.ball.position.x - this.ball.radius,
      'y': this.ball.position.y - this.ball.radius,
      'width': this.ball.radius * 2,
      'height': this.ball.radius * 2
    }

    for (wall in this.walls) {
      a = {
        'x': wall.x,
        'y': wall.y,
        'width': wall.width,
        'height': wall.height
      }

      check = this.aabb(a, b)

      if (check.overlaps) {
        this.ball.bounce(check.shiftX, check.shiftY)
        // print('ball-wall collision')
      }
    }
  }

  function checkPlatformWallsCollision() {
    b = {
      'x': this.platform.position.x,
      'y': this.platform.position.y,
      'width': this.platform.width,
      'height': this.platform.height,
    }

    for (wall in this.walls) {
      a = {
        'x': wall.x,
        'y': wall.y,
        'width': wall.width,
        'height': wall.height
      }

      check = this.aabb(a, b)

      if (check.overlaps) {
        // print('platform-wall collision')
      }
    }
  }
}