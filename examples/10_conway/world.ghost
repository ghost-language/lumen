class World {
  function load() {
    this.resolution = 10
    this.rows = (window.height / this.resolution) / 2
    this.columns = (window.width / this.resolution) / 2

    this.grid = this.generateGrid()

    this.grid = this.spawnLife(this.grid)
  }

  function generateGrid() {
    grid = []

    rows = 0 .. this.rows
    columns = 0 .. this.columns

    for (i in columns) {
      grid[i] = rows
    }

    return grid
  }

  function spawnLife(grid) {
    random.seed()
    
    rows = 0 .. this.rows
    columns = 0 .. this.columns

    for (i in columns) {
      row = []

      for (j in rows) {
        row[j] = random.random(1).round()
      }

      grid[i] = row
    }

    return grid
  }

  function update() {
    if (keyboard.isDown('space')) {
      grid = this.generateGrid()

      this.grid = this.spawnLife(grid)
    }

    next = this.generateGrid()
    next = this.spawnLife(next)

    for (i = 0; i < this.columns; i = i + 1) {
      for (j = 0; j < this.rows; j = j + 1) {
        status = this.grid[i][j]
        sum = 0

        neighbors = this.countNeighbors(i, j)

        // Rule 2
        // Default status
        next[i][j] = status

        // Rule 0
        if (status == 0 and neighbors == 3) {
          next[i][j] = 1
        }

        // Rule 1
        if (status == 1 and (neighbors < 2 or neighbors > 3)) {
          next[i][j] = 0
        }
      }
    }

    this.grid = next
  }

  function draw() {
    rows = 0 .. this.rows
    columns = 0 .. this.columns

    for (i = 0; i < this.columns; i = i + 1) {
      for (j = 0; j < this.rows; j = j + 1) {
        x = i * this.resolution
        y = j * this.resolution


        if (this.grid[i][j] == 1) {
          canvas.setColor(color.white)
          canvas.filledRectangle(x, y, this.resolution, this.resolution)
          // canvas.setColor(color.black)
          // canvas.rectangle(x, y, this.resolution, this.resolution)
        }
      }
    }
  }

  function countNeighbors(x, y) {
    sum = 0

    for (i = -1; i < 2; i = i + 1) {
      for (j = -1; j < 2; j = j + 1) {
        column = (x + i + this.columns) % this.columns
        row = (y + j + this.rows) % this.rows

        sum = sum + this.grid[column][row]
      }
    }

    sum = sum - this.grid[x][y]

    return sum
  }
}